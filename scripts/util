#!/bin/bash

WORKDIR="$(pwd)"
CACHE="$WORKDIR/.cache"
mkdir -p "$CACHE"

DEFAULT_DISTRIBUTION="distribution-karaf-0.4.3-Beryllium-SR3"

work_in() {
	local DIR="$1"
	shift
	local CMD="$*"
	pushd "$DIR" &>/dev/null && \
		$CMD &>/dev/null && \
		echo "Done." || \
		echo "Failed." && \
		popd
}

find_local_file() {
	local FILENAME=$1
	local TARGET=$2

	if [ -f "$CACHE/$FILENAME.tar.gz" ]; then
		eval $TARGET="$FILENAME.tar.gz"
	elif [ -f "$CACHE/$FILENAME.tar" ]; then
		eval $TARGET="$FILENAME.tar"
	elif [ -f "$CACHE/$FILENAME.zip" ]; then
		eval $TARGET="$FILENAME.zip"
	else
		eval $TARGET=""
	fi
}

download() {
	local FILENAME=$1
	local TARGET=$2
	local TARGET_FILE=$(eval "echo \$$TARGET")

	echo $TARGET_FILE

	if [ -z "$TARGET_FILE" ] || [ ! -f "$CACHE/$TARGET_FILE" ]; then
		URL="$(cat filelist | grep "$FILENAME\..*$")"
		if [ -z "$URL" ]; then
			echo "Error: Cannot download file: $FILENAME"
			exit 1
		fi
		wget $URL -P "$CACHE"
		find_local_file $FILENAME $TARGET
	fi
}

install() {
	local FILENAME=$1
	local TARGET=$2

	local INSTALL="echo"
	local TARGET_FILE="Failed to install target: $FILENAME"

	local INSTALL_PATH=${3:-$TARGET}

	rm -rf "$TARGET"
	if [ -f "$CACHE/$FILENAME.tar.gz" ]; then
		INSTALL="$(which tar) xvfz"
		TARGET_FILE="$CACHE/$FILENAME.tar.gz"
	elif [ -f "$CACHE/$FILENAME.tar" ]; then
		INSTALL="$(which tar) xvf"
		TARGET_FILE="$CACHE/$FILENAME.tar"
	elif [ -f "$CACHE/$FILENAME.zip" ]; then
		INSTALL="$(which unzip)"
		TARGET_FILE="$CACHE/$FILENAME.zip"
	fi

	mkdir -p "$INSTALL_PATH"

	echo "Installing $DISTRIBUTION"
	work_in "$INSTALL_PATH" "$INSTALL $TARGET_FILE"
}

merge_log_file() {
	local ORIGIN=$1
	local TMP="$1_tmp"

	rm -f $TMP

	cat "$ORIGIN" | sed "s/^.*2016/2016/g" | sort | uniq > "$TMP"
	mv "$TMP" "$ORIGIN"
}

set_distribution() {
	if [ -z "$1" ]; then
		DISTRIBUTION="$DEFAULT_DISTRIBUTION"
	else
		DISTRIBUTION="$1"
	fi
	DISTRIBUTION_DIR="$WORKDIR/$DISTRIBUTION"
	ODL_SYSPATH="$DISTRIBUTION_DIR/system/org/opendaylight"
}

setup_distribution() {
	set_distribution $1

	find_local_file $DISTRIBUTION DISTRIBUTION_FILE
	download $DISTRIBUTION DISTRIBUTION_FILE
	install $DISTRIBUTION "$DISTRIBUTION_DIR" "$WORKDIR"
}

setup_git() {
	echo "Setting up git for $DISTRIBUTION"
	work_in $DISTRIBUTION_DIR git init
}

configure_l2switch() {
	local PATCH="$PATCH_DIR/configure-l2switch-2016-11-06.patch"
	echo "Reconfiguring l2switch..."
	work_in "$DISTRIBUTION_DIR" git apply "$PATCH"
}

enable_ofstabilizer() {
	local PATCH="$PATCH_DIR/enable-ofstabilizer-2016-11-06.patch"

	echo "Enabling ofstabilizer..."

	if [ ! -d "$CACHE/ofstabilizer" ]; then
		work_in $CACHE git clone https://github.com/emiapwil/ofstabilizer
	fi

	local SRC="$CACHE/ofstabilizer/ofstabilizer.py"
	local DST="$DISTRIBUTION_DIR/bin/ofstabilizer.py"
	cp "$SRC" "$DST" &>/dev/null

	work_in $DISTRIBUTION_DIR git apply "$PATCH"
}

install_snlab_ofessentials() {
	find_local_file openflow SNLABOPENFLOW_FILE
	if [ -z "$SNLABOPENFLOW_FILE" ]; then
		download openflow SNLABOPENFLOW_FILE
	fi

	SNLABOF_DIR="$DISTRIBUTION_DIR/system/org/snlab/openflow"

	echo "Installing SNLAB openflow essential components..."
	install openflow "$SNLABOF_DIR"
	echo "Done."

	# TODO: how to determine the version for the distribution?
	local VERSION_SUFFIX=$(echo "$DISTRIBUTION" | sed 's/.*-\([^-]\+-[^-]\+\)/\1/g')
	OFE_VERSION=$(find $SNLABOF_DIR/features* -name "*$VERSION_SUFFIX")
	OFE_VERSION=${OFE_VERSION##*\/}

	echo "Enabling SNBLA openflow essential features: $OFE_VERSION..."

	local SRC_PATTERN="^featuresBoot=\(.*\)\$"
	local DST_PATTERN="featuresBoot=\1,snlab-caltechdemo-ofessentials"
	local CFG_FILE="$DISTRIBUTION_DIR/etc/org.apache.karaf.features.cfg"
	sed -i "s/$SRC_PATTERN/$DST_PATTERN/g" "$CFG_FILE"

	local SRC_PATTERN="^\(.*\)\(add new repository in an alphabetical order\)\(.*\)\$"
	local DST_PATTERN="\\1\\2\\3\\n\\t<repository>mvn:org.snlab.openflow\\/features-of-essentials\\/$OFE_VERSION\\/xml\\/features<\\/repository>"
	local FEATURE_FILE=$(find "$ODL_SYSPATH" -name '*features-integration-index*.xml')
	sed -i "s/$SRC_PATTERN/$DST_PATTERN/g" "$FEATURE_FILE"

	echo "Done."
}

patch_distribution() {
	PATCH_FILES=$(find $PATCH_DIR -name "$DISTRIBUTION\*" | sort)
	if [ "$PATCH_FILES" ]; then
		for patch in $PATCH_FILES; do
			echo "Applying patch $patch for "$DISTRIBUTION
			work_in $DISTRIBUTION_DIR git apply $patch
		done
	fi
}

debug_l2switch() {
	find_local_file l2switch L2SWITCH_FILE
	if [ -z "$L2SWITCH_FILE" ]; then
		download l2switch L2SWITCH_FILE
	fi

	install l2switch "$ODL_SYSPATH/l2switch"
}

debug_openflowplugin() {
	find_local_file openflowplugin OPENFLOWPLUGIN_FILE
	if [ -z "$OPENFLOWPLUGIN_FILE" ]; then
		download openflowplugin OPENFLOWPLUGIN_FILE
	fi

	install openflowplugin "$ODL_SYSPATH/openflowplugin"
}

